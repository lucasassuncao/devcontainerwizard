# DevContainer Configuration - FULL REFERENCE
# This template shows ALL available configuration options
# Comment/uncomment sections as needed for your project

# ==============================================================================
# BASIC CONFIGURATION
# ==============================================================================

# Container name (REQUIRED)
name: full-devcontainer-example

# ==============================================================================
# CONTAINER SOURCE - Choose ONE of the following:
# ==============================================================================

# Option 1: Use existing Docker image
image: mcr.microsoft.com/devcontainers/typescript-node:20

# Option 2: Build from Dockerfile (comment 'image' above if using this)
# build:
#   # Dockerfile path (REQUIRED if using build)
#   dockerfile: Dockerfile
#
#   # Build context (REQUIRED if using build)
#   context: .
#
#   # Build arguments
#   args:
#     VARIANT: "20"
#     NODE_VERSION: "20.10.0"
#     INSTALL_ZSH: "true"
#
#   # Target stage for multi-stage builds
#   target: development
#
#   # Cache from images
#   cacheFrom:
#     - node:20-alpine
#     - myregistry.com/myimage:cache
#
#   # Build output location
#   output: type=docker
#
#   # SSH agent forwarding for private repos
#   ssh:
#     - default
#
#   # Build secrets
#   secrets:
#     - id: npm_token
#       src: ~/.npmrc

# Option 3: Docker Compose (comment 'image' above if using this)
# dockerComposeFile:
#   - docker-compose.yml
#   - docker-compose.dev.yml
#
# # Service to use as dev container (REQUIRED with dockerComposeFile)
# service: app

# ==============================================================================
# WORKSPACE CONFIGURATION
# ==============================================================================

# Workspace folder path inside container
workspaceFolder: /workspace

# Workspace mount configuration (advanced)
# workspaceMount: source=${localWorkspaceFolder},target=/workspace,type=bind,consistency=cached

# Remote user (default user in container)
remoteUser: vscode

# How to probe for user environment variables
# Options: none | loginShell | loginInteractiveShell | interactiveShell
userEnvProbe: loginInteractiveShell

# ==============================================================================
# ENVIRONMENT VARIABLES
# ==============================================================================

# Container environment variables (available inside container)
containerEnv:
  NODE_ENV: development
  API_URL: http://localhost:3000
  DATABASE_URL: postgresql://postgres:postgres@db:5432/myapp
  REDIS_URL: redis://redis:6379
  LOG_LEVEL: debug
  CONTAINER_WORKSPACE_FOLDER: ${containerWorkspaceFolder}

# Remote environment variables (for SSH and remote connections)
remoteEnv:
  PATH: "${containerEnv:PATH}:/usr/local/go/bin:${containerWorkspaceFolder}/bin"
  DISPLAY: "${localEnv:DISPLAY}"

# Local environment variables (not exported to JSON, used for processing only)
# localEnv:
#   MY_LOCAL_SECRET: ${env:MY_LOCAL_SECRET}
#   HOST_PROJECT_PATH: ${localWorkspaceFolder}

# ==============================================================================
# PORT FORWARDING
# ==============================================================================

# Ports to forward from container to host
forwardPorts:
  - 3000 # Application
  - 5432 # PostgreSQL
  - 6379 # Redis
  - 8080 # Alternative web server
  - 9229 # Node.js debugger

# Port-specific attributes
portsAttributes:
  "3000":
    label: "Application"
    onAutoForward: openBrowser # Options: notify | openBrowser | openBrowserOnce | openPreview | silent | ignore
    protocol: http # Options: http | https

  "5432":
    label: "PostgreSQL Database"
    onAutoForward: silent

  "6379":
    label: "Redis Cache"
    onAutoForward: silent

  "8080":
    label: "Admin Panel"
    onAutoForward: notify
    protocol: http

  "9229":
    label: "Node Debugger"
    onAutoForward: silent

# Default attributes for ports not specified above
otherPortsAttributes:
  onAutoForward: ignore

# ==============================================================================
# MOUNTS & VOLUMES
# ==============================================================================

mounts:
  # Bind mount - links host directory to container
  - type: bind
    source: ./data
    target: /data
    consistency: cached # Options: cached | delegated | consistent

  # Another bind mount (read-only)
  - type: bind
    source: ./configs
    target: /etc/app/config
    readonly: true

  # Named volume - persists data between container rebuilds
  - type: volume
    source: node_modules
    target: ${containerWorkspaceFolder}/node_modules

  # Another volume for PostgreSQL data
  - type: volume
    source: postgres-data
    target: /var/lib/postgresql/data

# ==============================================================================
# DOCKER RUN OPTIONS
# ==============================================================================

# Additional arguments for 'docker run'
runArgs:
  - --add-host=host.docker.internal:host-gateway
  - --network=my-custom-network

# Command to override container CMD
# command: /bin/sh -c "while sleep 1000; do :; done"

# Startup command (runs before other lifecycle hooks)
# startupCommand: echo "Container starting..."

# Entrypoint to override
# entrypoint: /usr/local/bin/custom-entrypoint.sh

# ==============================================================================
# CONTAINER CAPABILITIES & SECURITY
# ==============================================================================

# Run init process inside container
init: true

# Run container in privileged mode (be careful!)
privileged: false

# Linux capabilities to add
capAdd:
  - SYS_PTRACE # For debugging
  - NET_ADMIN # For network configuration

# Linux capabilities to drop
capDrop:
  - ALL # Drop all, then add only what's needed

# Security options
securityOpt:
  - seccomp=unconfined
  - apparmor=unconfined

# Devices to expose to container
devices:
  - /dev/fuse:/dev/fuse
  - /dev/net/tun:/dev/net/tun

# ==============================================================================
# FEATURES
# ==============================================================================

# Order to install features (override default)
overrideFeatureInstallOrder:
  - ghcr.io/devcontainers/features/common-utils
  - ghcr.io/devcontainers/features/git
  - ghcr.io/devcontainers/features/node

# Features to install (from https://containers.dev/features)
features:
  # Common utilities
  ghcr.io/devcontainers/features/common-utils:2:
    installZsh: true
    installOhMyZsh: true
    upgradePackages: true
    username: vscode

  # Git
  ghcr.io/devcontainers/features/git:1:
    version: latest
    ppa: false

  # GitHub CLI
  ghcr.io/devcontainers/features/github-cli:1:
    version: latest

  # Docker-in-Docker
  ghcr.io/devcontainers/features/docker-in-docker:2:
    version: latest
    moby: true
    dockerDashComposeVersion: v2

  # Node.js (if not in base image)
  # ghcr.io/devcontainers/features/node:1:
  #   version: "20"
  #   nodeGypDependencies: true
  #   nvmVersion: "latest"

  # Python
  # ghcr.io/devcontainers/features/python:1:
  #   version: "3.11"
  #   installTools: true

  # Go
  # ghcr.io/devcontainers/features/go:1:
  #   version: "1.21"

  # AWS CLI
  # ghcr.io/devcontainers/features/aws-cli:1:
  #   version: latest

  # Azure CLI
  # ghcr.io/devcontainers/features/azure-cli:1:
  #   version: latest

  # kubectl
  # ghcr.io/devcontainers/features/kubectl-helm-minikube:1:
  #   version: latest
  #   helm: latest
  #   minikube: latest

  # Terraform
  # ghcr.io/devcontainers/features/terraform:1:
  #   version: latest

# ==============================================================================
# LIFECYCLE HOOKS
# ==============================================================================

# Command runs after container is created (runs once)
onCreateCommand: |
  echo "üöÄ Container created!"
  echo "Installing global tools..."
  npm install -g pnpm typescript tsx nodemon
  echo "Setting up git configuration..."
  git config --global init.defaultBranch main

# Command runs after onCreate (runs once)
postCreateCommand: |
  echo "üì¶ Installing dependencies..."
  pnpm install
  echo "üîß Running database migrations..."
  pnpm run db:migrate
  echo "üå± Seeding database..."
  pnpm run db:seed
  echo "‚úÖ Setup complete!"

# Command runs every time container starts
postStartCommand: |
  echo "üü¢ Container started!"
  echo "Starting development server..."
  pnpm run dev

# Command runs after attaching to container
postAttachCommand: |
  echo ""
  echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
  echo "‚ïë   Welcome to DevContainer! üéâ         ‚ïë"
  echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
  echo ""
  echo "üìù Available commands:"
  echo "  - pnpm run dev      : Start dev server"
  echo "  - pnpm run test     : Run tests"
  echo "  - pnpm run build    : Build project"
  echo ""
  echo "üîó Services:"
  echo "  - App: http://localhost:3000"
  echo "  - DB:  postgresql://localhost:5432"
  echo ""

# ==============================================================================
# FILE WATCHING
# ==============================================================================

watch:
  # Wait for these processes/files before starting
  waitFor:
    - postCreateCommand
    - postStartCommand

  # Restart container when these change
  restart:
    - .devcontainer/devcontainer.json
    - .devcontainer/Dockerfile
    - docker-compose.yml
    - package.json

# ==============================================================================
# CUSTOMIZATIONS
# ==============================================================================

customizations:
  # ============================================================================
  # VS CODE
  # ============================================================================
  vscode:
    # Extensions to install
    extensions:
      # ---- Language Support ----
      - dbaeumer.vscode-eslint
      - esbenp.prettier-vscode
      - ms-python.python
      - ms-python.vscode-pylance
      - golang.go
      - rust-lang.rust-analyzer

      # ---- Git ----
      - eamodio.gitlens
      - mhutchie.git-graph
      - donjayamanne.githistory

      # ---- Docker ----
      - ms-azuretools.vscode-docker
      - ms-kubernetes-tools.vscode-kubernetes-tools

      # ---- Database ----
      - mtxr.sqltools
      - mtxr.sqltools-driver-pg
      - cweijan.vscode-mysql-client2

      # ---- Testing ----
      - orta.vscode-jest
      - hbenl.vscode-test-explorer
      - kavod-io.vscode-jest-test-adapter

      # ---- API Development ----
      - humao.rest-client
      - 42crunch.vscode-openapi

      # ---- Utilities ----
      - usernamehw.errorlens
      - christian-kohler.path-intellisense
      - visualstudioexptteam.vscodeintellicode
      - wayou.vscode-todo-highlight
      - gruntfuggly.todo-tree
      - streetsidesoftware.code-spell-checker
      - editorconfig.editorconfig

      # ---- Productivity ----
      - github.copilot
      - github.copilot-chat
      - tabnine.tabnine-vscode

      # ---- Theme & UI ----
      - pkief.material-icon-theme
      - github.github-vscode-theme

    # VS Code settings
    settings:
      # ---- Editor ----
      editor.formatOnSave: true
      editor.defaultFormatter: esbenp.prettier-vscode
      editor.codeActionsOnSave:
        source.fixAll.eslint: "explicit"
        source.organizeImports: "explicit"
      editor.tabSize: 2
      editor.insertSpaces: true
      editor.rulers: [80, 120]
      editor.wordWrap: "on"
      editor.minimap.enabled: true
      editor.suggestSelection: "first"
      editor.bracketPairColorization.enabled: true
      editor.guides.bracketPairs: true
      editor.inlineSuggest.enabled: true

      # ---- Files ----
      files.autoSave: "afterDelay"
      files.autoSaveDelay: 1000
      files.trimTrailingWhitespace: true
      files.insertFinalNewline: true
      files.exclude:
        "**/.git": true
        "**/node_modules": true
        "**/.next": true
        "**/dist": true
        "**/build": true
        "**/.turbo": true
        "**/__pycache__": true
        "**/.pytest_cache": true

      # ---- Search ----
      search.exclude:
        "**/node_modules": true
        "**/dist": true
        "**/build": true
        "**/.git": true
        "**/coverage": true

      # ---- Terminal ----
      terminal.integrated.defaultProfile.linux: "zsh"
      terminal.integrated.fontFamily: "MesloLGS NF"
      terminal.integrated.fontSize: 14
      terminal.integrated.cursorStyle: "line"
      terminal.integrated.cursorBlinking: true

      # ---- Git ----
      git.enableSmartCommit: true
      git.confirmSync: false
      git.autofetch: true
      gitlens.defaultDateFormat: "YYYY-MM-DD HH:mm"

      # ---- Language Specific ----
      "[javascript]":
        editor.defaultFormatter: "esbenp.prettier-vscode"
      "[typescript]":
        editor.defaultFormatter: "esbenp.prettier-vscode"
      "[json]":
        editor.defaultFormatter: "esbenp.prettier-vscode"
      "[jsonc]":
        editor.defaultFormatter: "esbenp.prettier-vscode"
      "[html]":
        editor.defaultFormatter: "esbenp.prettier-vscode"
      "[css]":
        editor.defaultFormatter: "esbenp.prettier-vscode"
      "[python]":
        editor.defaultFormatter: "ms-python.black-formatter"
      "[go]":
        editor.defaultFormatter: "golang.go"

      # ---- ESLint ----
      eslint.validate:
        - javascript
        - typescript
        - javascriptreact
        - typescriptreact

      # ---- Prettier ----
      prettier.singleQuote: true
      prettier.trailingComma: "es5"
      prettier.semi: true
      prettier.tabWidth: 2

      # ---- TypeScript ----
      typescript.updateImportsOnFileMove.enabled: "always"
      typescript.suggest.autoImports: true
      javascript.suggest.autoImports: true

      # ---- Python ----
      python.linting.enabled: true
      python.linting.pylintEnabled: true
      python.formatting.provider: "black"
      python.testing.pytestEnabled: true

      # ---- Go ----
      go.useLanguageServer: true
      go.lintTool: "golangci-lint"
      go.formatTool: "goimports"

      # ---- Other ----
      todo-tree.general.tags: ["TODO", "FIXME", "HACK", "NOTE"]
      errorLens.enabledDiagnosticLevels: ["error", "warning"]

    # Remote user override (if different from container remoteUser)
    # remoteUser: vscode

  # ============================================================================
  # GITHUB CODESPACES
  # ============================================================================
  codespaces:
    settings:
      editor.formatOnSave: true
      terminal.integrated.defaultProfile.linux: "zsh"

    extensions:
      - dbaeumer.vscode-eslint
      - esbenp.prettier-vscode
      - github.copilot

  # ============================================================================
  # JETBRAINS IDEs
  # ============================================================================
  jetbrains:
    plugins:
      - com.intellij.plugins.github
      - org.jetbrains.plugins.go
      - com.jetbrains.python

  # ============================================================================
  # NEOVIM
  # ============================================================================
  neovim:
    plugins:
      - nvim-lspconfig
      - nvim-treesitter
      - telescope.nvim

# ==============================================================================
# SECRETS
# ==============================================================================

secrets:
  # NPM token for private packages
  NPM_TOKEN:
    description: "NPM authentication token for private registry"
    default: ""

  # GitHub token
  GITHUB_TOKEN:
    description: "GitHub personal access token"
    default: ""

  # Database password
  DB_PASSWORD:
    description: "PostgreSQL database password"
    default: "postgres"

  # API keys
  API_SECRET_KEY:
    description: "Secret key for API authentication"
    default: ""

# ==============================================================================
# SHUTDOWN ACTION
# ==============================================================================

# Action when container is stopped
# Options: none | stopContainer | stopCompose
shutdownAction: stopContainer
