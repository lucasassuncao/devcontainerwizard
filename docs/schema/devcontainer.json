{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/lucasassuncao/devcontainerwizard/internal/model/dev-container",
  "properties": {
    "$schema": {
      "type": "string",
      "description": "URL of the JSON schema that describes the format of this file."
    },
    "name": {
      "type": "string",
      "description": "Name of the dev container."
    },
    "image": {
      "type": "string",
      "description": "Docker image to use for the dev container."
    },
    "build": {
      "properties": {
        "dockerfile": {
          "type": "string",
          "description": "Path to the Dockerfile to use for building the image.",
          "default": "Dockerfile"
        },
        "context": {
          "type": "string",
          "description": "Build context directory.",
          "default": "."
        },
        "args": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Build arguments as key-value pairs."
        },
        "target": {
          "type": "string",
          "description": "Target stage for multi-stage Docker builds."
        },
        "cacheFrom": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of images to cache from."
        },
        "output": {
          "type": "string",
          "description": "Output location of the build."
        },
        "ssh": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "SSH mount sources to use during build."
        },
        "secrets": {
          "items": {
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier for the secret."
              },
              "src": {
                "type": "string",
                "description": "Path or source of the secret."
              }
            },
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array",
          "description": "Secrets to pass to the build process."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "dockerfile",
        "context"
      ],
      "description": "Configuration for building the image."
    },
    "dockerComposeFile": {
      "items": {
        "type": "string"
      },
      "type": "array",
      "description": "List of Docker Compose files to use."
    },
    "service": {
      "type": "string",
      "description": "Specific service to run from Docker Compose."
    },
    "workspaceFolder": {
      "type": "string",
      "description": "Path to the workspace folder inside the container."
    },
    "workspaceMount": {
      "type": "string",
      "description": "Mount type for the workspace folder."
    },
    "remoteUser": {
      "type": "string",
      "description": "User to use inside the container."
    },
    "userEnvProbe": {
      "type": "string",
      "description": "Command to detect the default user inside the container."
    },
    "containerEnv": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object",
      "description": "Environment variables to set in the container."
    },
    "remoteEnv": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object",
      "description": "Environment variables for remote connections (like SSH)."
    },
    "forwardPorts": {
      "items": true,
      "type": "array",
      "description": "Ports that are forwarded from the container to the local machine. Can be an integer port number, or a string of the format \"host:port_number\""
    },
    "portsAttributes": {
      "additionalProperties": {
        "properties": {
          "label": {
            "type": "string",
            "description": "Human-readable label for the port."
          },
          "onAutoForward": {
            "type": "string",
            "description": "Behavior when the port is auto-forwarded (notify, openBrowser, ignore)."
          },
          "protocol": {
            "type": "string",
            "description": "Network protocol (tcp/udp) for the port."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "type": "object",
      "description": "Additional attributes for forwarded ports."
    },
    "otherPortsAttributes": {
      "properties": {
        "label": {
          "type": "string",
          "description": "Human-readable label for the port."
        },
        "onAutoForward": {
          "type": "string",
          "description": "Behavior when the port is auto-forwarded (notify, openBrowser, ignore)."
        },
        "protocol": {
          "type": "string",
          "description": "Network protocol (tcp/udp) for the port."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Default attributes applied to all forwarded ports not defined in portsAttributes."
    },
    "mounts": {
      "items": {
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of mount (e.g., bind, volume)."
          },
          "source": {
            "type": "string",
            "description": "Source path of the mount."
          },
          "target": {
            "type": "string",
            "description": "Target path inside the container."
          },
          "consistency": {
            "type": "string",
            "description": "Consistency mode for the mount (e.g., cached, delegated, consistent)."
          },
          "readonly": {
            "type": "boolean",
            "description": "Whether the mount is read-only."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "source",
          "target"
        ]
      },
      "type": "array",
      "description": "Mount points inside the container."
    },
    "runArgs": {
      "items": {
        "type": "string"
      },
      "type": "array",
      "description": "Additional arguments to pass to 'docker run'."
    },
    "startupCommand": {
      "type": "string",
      "description": "Command to run on container startup."
    },
    "command": {
      "type": "string",
      "description": "Command to run inside the container instead of the default CMD."
    },
    "entrypoint": {
      "type": "string",
      "description": "Entrypoint to override in the container."
    },
    "init": {
      "type": "boolean",
      "description": "Whether to run an init process inside the container."
    },
    "privileged": {
      "type": "boolean",
      "description": "Run the container in privileged mode."
    },
    "capAdd": {
      "items": {
        "type": "string"
      },
      "type": "array",
      "description": "Linux capabilities to add to the container."
    },
    "capDrop": {
      "items": {
        "type": "string"
      },
      "type": "array",
      "description": "Linux capabilities to drop from the container."
    },
    "securityOpt": {
      "items": {
        "type": "string"
      },
      "type": "array",
      "description": "Security options for the container."
    },
    "devices": {
      "items": {
        "type": "string"
      },
      "type": "array",
      "description": "Devices to expose to the container."
    },
    "overrideFeatureInstallOrder": {
      "items": {
        "type": "string"
      },
      "type": "array",
      "description": "Order to install features inside the container, overriding defaults."
    },
    "features": {
      "additionalProperties": {
        "type": "object"
      },
      "type": "object",
      "description": "Features to install in the container and their options."
    },
    "onCreateCommand": {
      "type": "string",
      "description": "Command to run after the container is created."
    },
    "postCreateCommand": {
      "type": "string",
      "description": "Command to run after the container is created and initialized."
    },
    "postStartCommand": {
      "type": "string",
      "description": "Command to run after the container starts."
    },
    "postAttachCommand": {
      "type": "string",
      "description": "Command to run after attaching to the container."
    },
    "watch": {
      "properties": {
        "waitFor": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of processes or files to wait for before starting."
        },
        "restart": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of files or events that trigger a restart."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Configuration for files/processes to watch for restarts."
    },
    "customizations": {
      "properties": {
        "vscode": {
          "properties": {
            "settings": {
              "type": "object",
              "description": "Key-value settings for VS Code."
            },
            "extensions": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "List of VS Code extensions to install."
            },
            "remoteUser": {
              "type": "string",
              "description": "Remote user for VS Code container setup."
            }
          },
          "additionalProperties": false,
          "type": "object",
          "description": "VS Code specific customizations."
        },
        "codespaces": {
          "properties": {
            "settings": {
              "type": "object",
              "description": "Key-value settings for Codespaces."
            },
            "extensions": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "List of Codespaces extensions to install."
            }
          },
          "additionalProperties": false,
          "type": "object",
          "description": "Codespaces specific customizations."
        },
        "jetbrains": {
          "properties": {
            "plugins": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "List of JetBrains plugins to install."
            }
          },
          "additionalProperties": false,
          "type": "object",
          "description": "JetBrains IDE specific customizations."
        },
        "neovim": {
          "properties": {
            "plugins": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "List of Neovim plugins to install."
            }
          },
          "additionalProperties": false,
          "type": "object",
          "description": "Neovim specific customizations."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Editor/IDE customizations inside the container."
    },
    "secrets": {
      "additionalProperties": {
        "properties": {
          "description": {
            "type": "string",
            "description": "Human-readable description of the secret."
          },
          "default": {
            "type": "string",
            "description": "Default value for the secret if none is provided."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "type": "object",
      "description": "Secrets to pass to the container."
    },
    "shutdownAction": {
      "type": "string",
      "description": "Action to take when the container is stopped."
    }
  },
  "additionalProperties": false,
  "type": "object",
  "required": [
    "name"
  ]
}
